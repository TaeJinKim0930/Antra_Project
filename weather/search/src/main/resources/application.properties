server.port=9001
spring.application.name=search-service

eureka.client.register-with-eureka=true
eureka.client.fetch-registry=true

#indicates the frequency the client sends heartbeat to server to indicate that it is alive.
eureka.instance.lease-renewal-interval-in-seconds=30


# - 3. Write endpoints in search service ? fetch data from university service
#- 4. Write endpoint in search service ? fetch all employees from dummy data(if can?t retry) + fetch all student info
## end point (???)
# https://docs.spring.io/spring-boot/docs/2.1.1.RELEASE/reference/html/production-ready-endpoints.html#:~:text=Actuator%20endpoints%20let%20you%20monitor,can%20be%20enabled%20or%20disabled.
# reference

# 3
management.endpoints.enabled-by-default=false
management.endpoint.info.enabled=true
management.endpoint.beans.cache.time-to-live=10s

#(??)
#management.endpoints.web.cors.allowed-origins=jdbc:postgresql://localhost:5432/university
#management.endpoints.web.cors.allowed-methods=GET,POST
# not sure about adding university at the end to fetch data from university
eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka/


# 4
# https://dummy.restapiexample.com/api/v1/employees

#(??)
#management.endpoints.web.cors.allowed-origins=https://dummy.restapiexample.com/api/v1/employees
#management.endpoints.web.cors.allowed-methods=GET,POST
# not sure about adding university at the end to fetch data from university
#eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka/